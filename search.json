[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 network.r2d3 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"CJ Yetman. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yetman C (2022). network.r2d3: Makes interactive network graphs using r2d3. R package version 0.0.0.9000, https://cjyetman.github.io/network.r2d3.","code":"@Manual{,   title = {network.r2d3: Makes interactive network graphs using r2d3},   author = {CJ Yetman},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://cjyetman.github.io/network.r2d3}, }"},{"path":"/index.html","id":"networkr2d3","dir":"","previous_headings":"","what":"Makes interactive network graphs using r2d3","title":"Makes interactive network graphs using r2d3","text":"network.r2d3 makes interactive network charts D3 leveraging r2d3 intended closely follow functionality networkD3, following benefits: leverage benefits r2d3 versus including version D3 internally use better, consistent API based current standards tidyverse use transparent converters enable easy usage numerous data input types use testing infrastructure aid development","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Makes interactive network graphs using r2d3","text":"can install dev version network.r2d3 :","code":"devtools::install_github(\"cjyetman/network.r2d3\")"},{"path":"/reference/as_force_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert one of numerous data types to force_network's 'native' data format — as_force_data","title":"Convert one of numerous data types to force_network's 'native' data format — as_force_data","text":"force_network function uses 'native' data format consists ...","code":""},{"path":"/reference/as_force_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert one of numerous data types to force_network's 'native' data format — as_force_data","text":"","code":"as_force_data(.data, ...)"},{"path":"/reference/as_force_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert one of numerous data types to force_network's 'native' data format — as_force_data","text":".data force network description one numerous forms (see details). ... arguments passed as_force_data","code":""},{"path":"/reference/as_tree_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert one of numerous data types to tree_network's 'native' treenetdf form — as_tree_data","title":"Convert one of numerous data types to tree_network's 'native' treenetdf form — as_tree_data","text":"tree_network function uses 'native' data format consists data frame minimally 2 vectors/columns, one named 'nodeId' one named 'parentId'. columns data frame also passed JavaScript code attached elements D3 visualization can potentially accessed JavaScript functions. advantageous format : easy use understand R-like format hierarchical network can succinctly defined list unique node parent node since row defines unique node, additional columns can added add node-specific properties hierarchical network, every link/edge can uniquely identified node leads , therefore link/edge can also specifically addressed adding columns formatting incoming link as_tree_data can convert following data types: leafpathdf (table)--parent|parent|node--data.frame hierarchical nested list (JSON) hclust data.tree Node igraph ape phylo","code":""},{"path":"/reference/as_tree_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert one of numerous data types to tree_network's 'native' treenetdf form — as_tree_data","text":"","code":"as_tree_data(data, ...)  # S3 method for character as_tree_data(data, ...)  # S3 method for hclust as_tree_data(data, ...)  # S3 method for list as_tree_data(data, children_name = \"children\", node_name = \"name\", ...)  # S3 method for Node as_tree_data(data, ...)  # S3 method for phylo as_tree_data(data, ...)  # S3 method for tbl_graph as_tree_data(data, ...)  # S3 method for igraph as_tree_data(data, root = \"root\", ...)  # S3 method for data.frame as_tree_data(   data,   cols = NULL,   df_type = \"treenetdf\",   subset = names(data),   root,   ... )"},{"path":"/reference/as_tree_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert one of numerous data types to tree_network's 'native' treenetdf form — as_tree_data","text":"data tree network description one numerous forms (see details). ... arguments passed as_tree_data children_name character specifying name used list element contains childeren elements. node_name character specifying name used list element contains name node root root name. cols named character vector specifying names columns converted standard treenetdf names. df_type character specifying type data frame convert. Can treenetdf leafpathdf. subset character vector specifying names columns (order) used define hierarchy.","code":""},{"path":"/reference/as_tree_data.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Convert one of numerous data types to tree_network's 'native' treenetdf form — as_tree_data","text":"character: Convert JSON URL treenetdf hclust: Convert hclust objects treenetdf list: Convert nested list treenetdf Node: data.tree treenetdf phylo: Phylo tree treenetdf tbl_graph: tbl_graph_to_treenetdf igraph: Convert igraph tree treenetdf data.frame: Convert data.frame treenetdf","code":""},{"path":"/reference/as_tree_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert one of numerous data types to tree_network's 'native' treenetdf form — as_tree_data","text":"","code":"links <- read.csv(header = TRUE, stringsAsFactors = FALSE, text = '                    source,target,name                    1,,one                    2,1,two                    3,1,three                    4,1,four                    5,2,five                    6,2,six                    7,2,seven                    8,6,eight')   # Convert data  as_tree_data(links, cols = c(nodeId = 'source', parentId = 'target')) #> # A tibble: 8 × 3 #>   nodeId parentId name  #>    <int>    <int> <chr> #> 1      1       NA one   #> 2      2        1 two   #> 3      3        1 three #> 4      4        1 four  #> 5      5        2 five  #> 6      6        2 six   #> 7      7        2 seven #> 8      8        6 eight"},{"path":"/reference/force_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interactive force network plot in a htmlwidget — force_network","title":"Create an interactive force network plot in a htmlwidget — force_network","text":"force_network function creates interactive force network plot htmlwidget","code":""},{"path":"/reference/force_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interactive force network plot in a htmlwidget — force_network","text":"","code":"force_network(data, width = NULL, height = NULL, ..., viewer = \"internal\")"},{"path":"/reference/force_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interactive force network plot in a htmlwidget — force_network","text":"data tree network description one numerous forms (see details) width, height width height exported htmlwidget pixels (single integer value; default == NULL) ... options (see details) viewer whether view plot internal viewer browser","code":""},{"path":"/reference/tree_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interactive tree network plot in an htmlwidget — tree_network","title":"Create an interactive tree network plot in an htmlwidget — tree_network","text":"tree_network function creates interactive tree network plot htmlwidget","code":""},{"path":"/reference/tree_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interactive tree network plot in an htmlwidget — tree_network","text":"","code":"tree_network(   data,   width = NULL,   height = NULL,   treeType = \"tidy\",   direction = \"right\",   linkType = \"diagonal\",   ...,   viewer = \"internal\" )"},{"path":"/reference/tree_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interactive tree network plot in an htmlwidget — tree_network","text":"data tree network description one numerous forms (see details) width, height width height exported htmlwidget pixels (single integer value; default == NULL) treeType type tree; one \"tidy\" \"cluster\" (see details) (default == \"tidy\") direction direction toward tree grows; one \"right\", \"left\", \"\", \"\" (see details) (default == \"right\") linkType type link shape; one \"diagonal\" \"elbow\" (see details) (default == \"diagonal\") ... options (see details)","code":""},{"path":"/reference/tree_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an interactive tree network plot in an htmlwidget — tree_network","text":"","code":"treedf <- data.frame(nodeId = LETTERS[1:7],                      parentId = c(\"\", \"A\", \"A\", \"B\", \"B\", \"C\", \"C\"),                      name = LETTERS[1:7],                      stringsAsFactors = FALSE) tree_network(treedf)  {\"x\":{\"data\":[{\"nodeId\":\"A\",\"parentId\":\"\",\"name\":\"A\",\"nodeSize\":10,\"nodeStroke\":\"steelblue\",\"nodeColor\":\"steelblue\",\"nodeSymbol\":\"circle\",\"nodeFont\":\"sans-serif\",\"nodeFontSize\":12,\"textColor\":\"grey\",\"textOpacity\":1,\"linkColor\":\"grey\",\"linkWidth\":\"1.5px\"},{\"nodeId\":\"B\",\"parentId\":\"A\",\"name\":\"B\",\"nodeSize\":10,\"nodeStroke\":\"steelblue\",\"nodeColor\":\"steelblue\",\"nodeSymbol\":\"circle\",\"nodeFont\":\"sans-serif\",\"nodeFontSize\":12,\"textColor\":\"grey\",\"textOpacity\":1,\"linkColor\":\"grey\",\"linkWidth\":\"1.5px\"},{\"nodeId\":\"C\",\"parentId\":\"A\",\"name\":\"C\",\"nodeSize\":10,\"nodeStroke\":\"steelblue\",\"nodeColor\":\"steelblue\",\"nodeSymbol\":\"circle\",\"nodeFont\":\"sans-serif\",\"nodeFontSize\":12,\"textColor\":\"grey\",\"textOpacity\":1,\"linkColor\":\"grey\",\"linkWidth\":\"1.5px\"},{\"nodeId\":\"D\",\"parentId\":\"B\",\"name\":\"D\",\"nodeSize\":10,\"nodeStroke\":\"steelblue\",\"nodeColor\":\"steelblue\",\"nodeSymbol\":\"circle\",\"nodeFont\":\"sans-serif\",\"nodeFontSize\":12,\"textColor\":\"grey\",\"textOpacity\":1,\"linkColor\":\"grey\",\"linkWidth\":\"1.5px\"},{\"nodeId\":\"E\",\"parentId\":\"B\",\"name\":\"E\",\"nodeSize\":10,\"nodeStroke\":\"steelblue\",\"nodeColor\":\"steelblue\",\"nodeSymbol\":\"circle\",\"nodeFont\":\"sans-serif\",\"nodeFontSize\":12,\"textColor\":\"grey\",\"textOpacity\":1,\"linkColor\":\"grey\",\"linkWidth\":\"1.5px\"},{\"nodeId\":\"F\",\"parentId\":\"C\",\"name\":\"F\",\"nodeSize\":10,\"nodeStroke\":\"steelblue\",\"nodeColor\":\"steelblue\",\"nodeSymbol\":\"circle\",\"nodeFont\":\"sans-serif\",\"nodeFontSize\":12,\"textColor\":\"grey\",\"textOpacity\":1,\"linkColor\":\"grey\",\"linkWidth\":\"1.5px\"},{\"nodeId\":\"G\",\"parentId\":\"C\",\"name\":\"G\",\"nodeSize\":10,\"nodeStroke\":\"steelblue\",\"nodeColor\":\"steelblue\",\"nodeSymbol\":\"circle\",\"nodeFont\":\"sans-serif\",\"nodeFontSize\":12,\"textColor\":\"grey\",\"textOpacity\":1,\"linkColor\":\"grey\",\"linkWidth\":\"1.5px\"}],\"type\":\"json\",\"container\":\"svg\",\"options\":{\"treeType\":\"tidy\",\"direction\":\"right\",\"linkType\":\"diagonal\"},\"script\":\"var d3Script = function(d3, r2d3, data, svg, width, height, options, theme, console) {\\nthis.d3 = d3;\\n\\nsvg = d3.select(svg.node());\\n/* R2D3 Source File:  /home/runner/work/_temp/Library/network.r2d3/d3/tree_network.js */\\n// !preview r2d3 data = jsonlite::toJSON(data.frame(nodeId = LETTERS[1:7], parentId = c(\\\"\\\", \\\"A\\\", \\\"A\\\", \\\"B\\\",\\\"B\\\", \\\"C\\\", \\\"C\\\"), name = LETTERS[1:7], nodeSize = 8, nodeStroke = \\\"steelblue\\\", nodeColor = \\\"green\\\", nodeSymbol = \\\"circle\\\", nodeFont = \\\"sans-serif\\\", nodeFontSize = 18, textColor = \\\"grey\\\", textOpacity = 1, linkColor = \\\"grey\\\", linkWidth = \\\"1.5px\\\", stringsAsFactors = FALSE), auto_unbox = TRUE), d3_version = 4, options = list(treeType = 'tidy', direction = 'right', linkType = 'diagonal')\\n\\n\\n\\nr2d3.onRender(function(data, svg, width, height, options) {\\n\\n        // TESTING //\\n        //window.data = data;\\n        //window.options = options;\\n        /////////////\\n\\n        var duration = 800;\\n\\n        var root = d3.stratify()\\n        .id(function(d){ return d.nodeId; })\\n        .parentId(function(d){ return d.parentId; })\\n        (data);\\n\\n        function mouseover(d) {\\n          return eval(options.mouseover)\\n        }\\n\\n        function mouseout(d) {\\n          return eval(options.mouseout)\\n        }\\n\\n        function symbolgen(name) {\\n          name = name == 'undefined' ? 'Circle' : name;\\n          name = name.charAt(0).toUpperCase() + name.substr(1).toLowerCase();\\n          name = [\\\"Circle\\\", \\\"Cross\\\", \\\"Diamond\\\", \\\"Square\\\", \\\"Star\\\", \\\"Triangle\\\", \\\"Wye\\\"].indexOf(name) == -1 ? \\\"Circle\\\" : name;\\n          return d3.symbol().type(d3['symbol' + name]);\\n        }\\n\\n        var directions = {\\n          \\\"down\\\": {\\n            tree: (options.treeType === \\\"tidy\\\" ? d3.tree() : d3.cluster()).size([width, height]),\\n            linkgen: (options.linkType === \\\"diagonal\\\" ?\\n                        d3.linkVertical().x(function(d) { return d.x; }).y(function(d) { return d.y; })\\n                      :\\n                        function unobj(d) {\\n                          return d3.line().curve(d3.curveStepAfter)(Object.keys(d).map(function(key) { return [d[key].x, d[key].y]; }));\\n                        }\\n            ),\\n            nodegen: function(d) { return \\\"translate(\\\" + d.x + \\\",\\\" + d.y + \\\")\\\"; }\\n          },\\n          \\\"left\\\": {\\n            tree: (options.treeType === \\\"tidy\\\" ? d3.tree() : d3.cluster())\\n            .size([height, width]),\\n            linkgen: (options.linkType === \\\"diagonal\\\" ?\\n                        d3.linkHorizontal()\\n                      .x(function(d) { return width - d.y; })\\n                      .y(function(d) { return d.x; })\\n                      :\\n                        function unobj(d) {\\n                          return d3.line().curve(d3.curveStepBefore)(Object.keys(d).map(function(key) { return [width - d[key].y, d[key].x]; }));\\n                        }),\\n            nodegen: function(d) { return \\\"translate(\\\" + (width - d.y) + \\\",\\\" + d.x + \\\")\\\"; }\\n          },\\n          \\\"up\\\": {\\n            tree: (options.treeType === \\\"tidy\\\" ? d3.tree() : d3.cluster()).size([width, height]),\\n            linkgen: (options.linkType === \\\"diagonal\\\" ?\\n                        d3.linkVertical().x(function(d) { return d.x; }).y(function(d) { return height - d.y; })\\n                      :\\n                        function unobj(d) {\\n                          return d3.line().curve(d3.curveStepAfter)(Object.keys(d).map(function(key) { return [d[key].x, height - d[key].y]; }));\\n                        }\\n            ),\\n            nodegen: function(d) { return \\\"translate(\\\" + d.x + \\\",\\\" + (height - d.y) + \\\")\\\"; }\\n          },\\n          \\\"right\\\": {\\n            tree: (options.treeType === \\\"tidy\\\" ? d3.tree() : d3.cluster()).size([height, width - 100]),\\n            linkgen: (options.linkType === \\\"diagonal\\\" ?\\n                        d3.linkHorizontal()\\n                      .x(function(d) { return d.y; })\\n                      .y(function(d) { return d.x; })\\n                      :\\n                        function unobj(d) {\\n                          return d3.line().curve(d3.curveStepBefore)(Object.keys(d).map(function(key) { return [d[key].y, d[key].x]; }));\\n                        }),\\n            nodegen: function(d) { return \\\"translate(\\\" + d.y + \\\",\\\" + d.x + \\\")\\\"; }\\n          },\\n          \\\"radial\\\": {\\n            tree: (options.treeType === \\\"tidy\\\" ? d3.tree() : d3.cluster())\\n            .size([2 * Math.PI, Math.min(width,height) / 2])\\n            .separation(function(a, b) { return (a.parent == b.parent ? 1 : 2) / a.depth; }),\\n            linkgen: d3.linkRadial().angle(function(d) { return d.x; }).radius(function(d) { return d.y; }),\\n            nodegen: function(d) { return \\\"translate(\\\" + [(d.y = +d.y) * Math.cos(d.x -= Math.PI / 2), d.y * Math.sin(d.x)] + \\\")\\\"; }\\n          }\\n        };\\n\\n        // radial type needs to be centered on the canvas\\n        if (options.direction == \\\"radial\\\") {\\n          g = svg.append(\\\"g\\\").attr(\\\"transform\\\", \\\"translate(\\\" + (width / 2 + 40) + \\\",\\\" + (height / 2 + 90) + \\\")\\\");\\n          root.x0 = height / 2;\\n          root.y0 = width / 2;\\n        } else {\\n          g = svg.append(\\\"g\\\");\\n          root.x0 = height / 2;\\n          root.y0 = 0;\\n        }\\n\\n        var tree = directions[options.direction].tree,\\n        linkgen = directions[options.direction].linkgen,\\n        nodegen = directions[options.direction].nodegen;\\n\\n        var linkgrp = g.append(\\\"g\\\").attr(\\\"class\\\", \\\"linkgrp\\\");\\n        var nodegrp = g.append(\\\"g\\\").attr(\\\"class\\\", \\\"nodegrp\\\");\\n\\n        update(root);\\n\\n        function update(source) {\\n          var treeData = tree(root);\\n\\n          if (treeData.descendants().reduce(function(a, b) { return typeof b.data.height !== 'undefined' && a; }, true)) {\\n            var ymax = d3.max(treeData.descendants(), function(d) { return d.data.height || d.height; });\\n            var ymin = d3.min(treeData.descendants(), function(d) { return d.data.height || d.height; });\\n            heightToY = d3.scaleLinear().domain([ymax, ymin]).range([0, width]);\\n            treeData.eachAfter(function(d) { d.y = heightToY(d.data.height || d.height); });\\n          }\\n\\n          var nodes = treeData.descendants(),\\n          links = treeData.links(nodes);\\n\\n          // TESTING //\\n          //window.nodes = nodes;\\n          //window.links = links;\\n          /////////////\\n\\n          // update the links\\n          var link = linkgrp.selectAll(\\\".link\\\")\\n          .data(links, function(d) { return d.target.id; });\\n\\n          // enter any new links at the parent's previous position\\n          var linkEnter = link.enter().insert(\\\"path\\\", \\\"g\\\")\\n          .attr(\\\"class\\\", \\\"link\\\")\\n          .style(\\\"fill\\\", \\\"none\\\")\\n          .style(\\\"stroke\\\", function(d){ return d.target.data.linkColor; })\\n          .style(\\\"stroke-opacity\\\", 0.4)\\n          .style(\\\"stroke-width\\\", function(d){ return d.target.data.linkWidth; })\\n          .attr(\\\"d\\\", function(d) {\\n          var o = {x: source.x0, y: source.y0};\\n          return linkgen({source: o, target: o});\\n          })\\n\\n          // transition links to their new position\\n          var linkUpdate = linkEnter.merge(link);\\n          linkUpdate.transition()\\n          .duration(duration)\\n          .attr(\\\"d\\\", linkgen)\\n\\n          // Transition exiting nodes to the parent's new position\\n          link.exit().transition()\\n          .duration(duration)\\n          .attr(\\\"d\\\", function(d) {\\n            var o = {x: source.x, y: source.y};\\n            return linkgen({source: o, target: o});\\n          })\\n          .remove()\\n\\n          var node = nodegrp.selectAll(\\\".node\\\").data(nodes, function(d,i) { return d.id || (d.id = ++i); });\\n\\n          nodeEnter = node.enter()\\n          .append(\\\"g\\\")\\n          .attr(\\\"class\\\", \\\"node\\\")\\n          .attr(\\\"transform\\\", function(d){ return typeof source !== 'undefined' ? nodegen({x: source.x0, y: source.y0}) : nodegen(d); })\\n          .on(\\\"click\\\", click)\\n          .on(\\\"mouseover\\\", mouseover)\\n          .on(\\\"mouseout\\\", mouseout)\\n          .attr('cursor', function(d){ return d.children || d._children ? \\\"pointer\\\" : \\\"default\\\"; })\\n\\n          nodeEnter.append(\\\"path\\\")\\n          .style(\\\"fill\\\", function(d){ return d._children ? d.data.nodeStroke: 'white';})\\n          .style(\\\"opacity\\\", 1e-6)\\n          .style(\\\"stroke\\\", function(d){ return d.data.nodeStroke; })\\n          .style(\\\"stroke-width\\\", \\\"1.5px\\\")\\n          .attr(\\\"d\\\", function(d){ return symbolgen(d.data.nodeSymbol).size(Math.pow(d.data.nodeSize, 2))(); })\\n\\n          nodeEnter.append(\\\"text\\\")\\n          .attr(\\\"transform\\\", \\\"rotate(\\\" + options.textRotate + \\\")\\\")\\n          .attr(\\\"x\\\", d => d.children ? -6 : 6)\\n          .attr(\\\"text-anchor\\\", d => d.children ? \\\"end\\\" : \\\"start\\\")\\n          .style(\\\"font-family\\\", function(d){ return d.data.nodeFont; })\\n          .style(\\\"font-size\\\", \\\"1px\\\")\\n          .style(\\\"opacity\\\", function(d){ return d.data.textOpacity; })\\n          .style(\\\"fill\\\", function(d){ return d.data.textColor; })\\n          .text(function(d){ return d.data.name; })\\n\\n          var nodeUpdate = nodeEnter.merge(node);\\n\\n          nodeUpdate.transition()\\n          .duration(duration)\\n          .attr(\\\"transform\\\", nodegen)\\n\\n          nodeUpdate.select(\\\"path\\\")\\n          .transition()\\n          .duration(duration)\\n          .style(\\\"opacity\\\", 1)\\n          .style(\\\"fill\\\", function(d){ return d._children ? d.data.nodeStroke : 'white'; })\\n\\n          nodeUpdate.select(\\\"text\\\")\\n          .transition()\\n          .duration(duration)\\n          .style(\\\"font-size\\\", function(d){ return d.data.nodeFontSize + \\\"px\\\"; })\\n\\n          var nodeExit = node.exit();\\n\\n          nodeExit.transition(\\\"exittransition\\\")\\n          .duration(duration)\\n          .attr(\\\"transform\\\", function(d){ return nodegen(source); })\\n          .remove()\\n\\n          nodeExit.select('path')\\n          .transition(\\\"exittransition\\\")\\n          .duration(duration)\\n          .style('fill', 1e-6)\\n          .style('fill-opacity', 1e-6)\\n          .attr(\\\"d\\\", d3.symbol().type(d3.symbolCircle).size(1e-6))\\n\\n          nodeExit.select('text')\\n          .transition(\\\"exittransition\\\")\\n          .duration(duration)\\n          .style('opacity', 1e-6)\\n\\n          nodes.forEach(function(d){\\n            d.x0 = d.x;\\n            d.y0 = d.y;\\n          });\\n        }\\n\\n        function click(d) {\\n          if (d.children) {\\n            d._children = d.children;\\n            d.children = null;\\n          } else {\\n            d.children = d._children;\\n            d._children = null;\\n          }\\n          update(d);\\n        }\\n\\n});\\n};\",\"style\":null,\"version\":4,\"theme\":{\"default\":{\"background\":\"#FFFFFF\",\"foreground\":\"#000000\"},\"runtime\":null},\"useShadow\":true},\"evals\":[],\"jsHooks\":[]}"}]
